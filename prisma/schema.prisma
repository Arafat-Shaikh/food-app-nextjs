// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Account        Account[]
  FoodListing    FoodListing[]
  CartItem       CartItem[]
  Addresses      Address[]
}

model Address {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String? @db.ObjectId
  address         String
  phone           String
  place           String
  deliveryAddress Boolean @default(false)
  User            User?   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FoodListing {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  restaurantName     String
  imageSrc           String
  price              Int
  restaurantLocation String
  rating             Int
  category           String

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model CartItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  foodId    String      @db.ObjectId
  quantity  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  food      FoodListing @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  Processing
  Delivered
  Incomplete
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  isPaid      Boolean     @default(false)
  totalAmount Int
  status      OrderStatus @default(Incomplete)
  orderItems  OrderItem[]
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  foodListingId String? @db.ObjectId
  orderId       String? @db.ObjectId
  quantity      Int

  FoodListing FoodListing? @relation(fields: [foodListingId], references: [id])
  Order       Order?       @relation(fields: [orderId], references: [id])
}
